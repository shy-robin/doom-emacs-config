#+title: Org Mode Compact Guide
#+description: 参考：https://orgmode.org/guide/
#+author: Shy Robin
#+startup: overview
#+TAGS: [ Group : @work @home @tennisclub ]
#+TAGS: laptop(l) car(c) pc(p) sailboat(s)

* 文档结构
** 标题
使用星号加空格编写标题；
使用 *org-bullets* 插件设置标题符号的样式；

* 显示隐藏
** Tab
控制当前子树下的内容的显示和隐藏。
** Shift + Tab
控制所有子树内容的显示和隐藏。
** 文件打开时的显示状态
通过设置 =org-startup-folded= 变量或者在 org 文件开头设置 =#+starup:= 控制 org 文件打开时内容的状态。
可取值：
- overview
- content
- showall
- showeverything
- show<n>levels

设置完成之后使用 =M-x: revert-buffer= 或者使用快捷键 =SPC-b-r= 重新加载缓冲区，即可生效。
* 移动
** g j
移动到下一个可见标题。
** g k
移动到上一个可见标题。
** g J
移动到下一个同级标题。
** g K
移动到上一个同级标题。
** g l
移动到内部的标题。
** g h
移动到外部的标题。
* 结构编辑
** C-RET
创建一个同级标题（如果在 normal 模式则会自动进入 insert 模式）。
** C-S-RET
向上创建一个同级标题。
** M-RET
创建一个同级标题（保持原有的模式）。
** M-S-RET
创建一个同级的 TODO 标题。
** TAB
在 insert 模式下可以向下切换标题的层级。
** S-TAB
在   insert 模式下可以向上切换标题的层级。
** M-h/l/arrow-left/arrow-right
切换标题的层级。
** M-j/k/arrow-up/arrow-down
上下移动标题（不会超出父级标题）。
** M-S-j/k/arrow-up/arrow-down
上下移动标题（可以超出父级标题）。
** SPC-m-s-r
传送标题到任意位置。
** SPC-m-s-n
缩小标题（仅展示该标题以下的内容）。
** SPC-m-s-N
放大标题（还原，显示所有的内容）。
* 稀疏树（Sparse Tree)
在 Org mode 中，Sparse Tree（稀疏树）是一种功能强大的搜索和筛选工具，可以帮助你快速定位和展示与特定条件相匹配的部分内容。Sparse Tree 可以在当前 Org 文件中创建一个新的缩小的视图，只显示与指定条件匹配的部分，而隐藏其他内容。
** SPC-m-s-s
org-sparse-tree
* 普通列表
** 列表类型
*** 无序列表
以 - + * 开头。
- list1
  * item1
  * item2
- list2
  + item1
  + item2
*** 有序列表
以 1. 1) 开头。
1. list1
2. list2
   1. item1
   2. item2
*** 描述列表
用 :: 分隔列表名称和描述信息
- list1 :: this is list1
- list2 :: this is list2
** 快捷键
*** M-S-RET
创建一个 checkbox 类型的子项。
- list1
- [ ] list2
- [ ] list3
*** M-j/k/arrow-up/arrow-down
上下移动项（不能超出父级范围）。
*** M-S-j/k/arrow-up/arrow-down
上下移动项（可以超出父级范围）。
*** M-h/l/arrow-left/arrow-right
左右移动项（不会影响子项）。
*** M-S-h/l/arrow-left/arrow-right
左右移动项（会影响子项）。
*** C-c C-c
如果是 checkbox 则会切换它的状态，或者在 checkbox 的方框上按下 RET 键也能切换状态。
*** C-c -
切换列表符号。
* 表格
** 创建表格
输入 =|field1|field2= ，然后按下 C-c RET 即可快速创建一个带有分隔符的表格。如下：
| field1 | field2 |
|--------+--------|
|        |        |
** 快速创建分隔符
输入 |- ，按下 TAB 键便可快速生成一行分隔符。
|---|
|   |
** 快速创建表格
- SPC-m-b-c
- C-c |
| name | gender | age |
|------+--------+-----|
| Amy  | male   |  18 |
| Tom  | female |  20 |
| Jack | male   |  22 |
** 对齐表格
当输入表格内容时，按下以下键便可以重新对齐表格：
- TAB
- S-TAB
- RET
- C-c C-c
** 单元格移动
C-S-h/j/k/l
| name  | gender | age    |
|-------+--------+--------|
| Tom   |     10 | male   |
| Tom   |     11 | female |
| Tom   |     12 | male   |
|-------+--------+--------|
| Jerry |   male | 21     |
** 行和列移动
*** M-h/l
左右移动列。
*** M-j/k
上下移动行。
*** M-S-h/l
删除或增加列。
*** M-S-k/j
删除或增加行。
*** C-c -
增加一行分隔符。
*** C-c RET
增加一行分隔符并插入一行。
*** SPC-m-s-S
对光标所在列重新排序。
* 超链接
** 格式
- =[[LINK][DESCRIPTION]]=
- =[[LINK]]=
** 编辑链接或快速创建链接
一旦创建链接，org mode 会自动将链接渲染成特定的格式。如果要编辑链接的内容，可通过以下两种方式：
- SPC-m-l-l
- C-c C-l
[[github:shy-robin][My Github repo]]

另外，如果没有链接使用以上两种方式会快速创建链接。
** 内部链接
如果 LINK 不是 URL，则会在当前文件里查找可以匹配 LINK 的标题。
[[格式][Find Target]]
[[Demo][Demo]]

*** Demo
** 外部链接
支持多种不同格式的外部链接。
- [[https://www.baidu.com][百度]]
- [[file:~/Pictures/duck.png][可达鸭的图片]]
- [[file:demo.org::12][demo.org第十二行]]
** 操作链接
*** SPC-m-l-l
快速创建或编辑链接。
*** C-c C-o / RET
打开链接。
*** C-c &
回到链接的位置(仅对内部链接有效)。
*** SPC-n-l
存储当前位置到一个新的链接。
将当前位置记录到一个链接中，该链接会出现在创建链接的提示窗中，当选择链接后，会自动将它从提示窗中移除，相当于只使用一次。
* 待办事项
** 基础功能
任何以 TODO 开头的标题都会被自动识别为待办事项。
*** 快速设置标题状态
使用 SPC-m-t 可以快速设置标题的状态。
**** TODO Learn Emacs
*** 快速切换标题状态
使用 C-S-h/l 可以快速设置标题的状态。
**** NO Do someting
*** 查看所有待办事项
使用 SPC-m-s-s t 即可查看所有 TODO 的稀疏树。
*** 快速创建同级待办
使用 M-S-RET 可以快速创建同级的待办事项。
** 多状态工作流
我们可以使用 TODO 关键字声明一个连续的工作状态：

#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))
#+end_src

以 | 分隔开两种结果状态，左边的表示正在进行中的状态，右边的表示结束的状态。

如果不想修改原有的 TODO 状态，可以新建一个状态集：

#+begin_src emacs-lisp :tangle yes
(setq org-todo-keywords
      '((sequence "TODO(t)" "|" "DONE(d)")
        (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")))
#+end_src

如果不想修改通用的设置，可以针对当前文件进行配置：
#+begin_src emacs-lisp :tangle yes
#+TODO: TODO(t) | DONE(d)
#+TODO: REPORT(r) BUG(b) KNOWNCAUSE(k) | FIXED(f)
#+TODO: | CANCELED(c)
#+end_src
** 日志
*** timestamp
#+begin_src emacs-lisp :tangle yes
(setq org-log-done 'time)
#+end_src

当待办事项完成后会记录完成的时间。

也可以使用 =#+starup: logdone= 针对单个文件进行记录。

**** DONE test
CLOSED: [2023-06-24 Sat 22:27]

*** note
#+begin_src emacs-lisp :tangle yes
(setq org-log-done 'note)
#+end_src

当待办事项完成后会记录完成的时间以及相应的笔记。

**** TODO test
- CLOSING NOTE [2023-06-24 Sat 22:11] \\
  hello world2
- CLOSING NOTE [2023-06-24 Sat 22:11] \\
  hello world

*** log-into-drawer
当记录的 note 过多时，会导致日志过长，不便于阅读。
设置 =org-log-into-drawer= 变量会使所有 log 信息折叠到 LOGBOOK 区域内，可以使用 TAB 展开或收缩 log 信息。
同样，也可以设置 =#+startup: logdrawer= 针对单个文件进行配置。

**** DONE test
CLOSED: [2023-06-24 Sat 22:32]
:LOGBOOK:
- CLOSING NOTE [2023-06-24 Sat 22:32] \\
  very good
:END:

*** special marker
我们可以给每种状态设置不同的日志类型，这里有两种特殊的标记符号:
- ! 代表 timestamp
- @ 代表 note

可以在文件开头设置：
#+begin_src emacs-lisp :tangle yes
#+TODO: TODO(t) WAIT(w@/!) | DONE(d!) CANCELED(c@)
#+end_src

同样可以在 org-todo-keywords 变量中设置。
#+begin_src emacs-lisp :tangle yes
(setq org-todo-keywords
      '((sequence "TODO(t!)" "|" "DONE(d@)")
        (sequence "REPORT(r!)" "BUG(b!)" "KNOWNCAUSE(k!)" "|" "FIXED(f@)")))
#+end_src

**** DONE test
CLOSED: [2023-06-24 Sat 22:34]
:LOGBOOK:
- State "DONE"       from "TODO"       [2023-06-24 Sat 22:34] \\
  so good
- State "TODO"       from              [2023-06-24 Sat 22:34]
:END:

** 优先级
TODO 事项有 A-C 三个优先级：
- A（高优）
- B（默认）
- C（低优）

*** SPC-m-p-p
设置优先级。
*** SPC-m-p-u
增加优先级。
*** SPC-m-p-d
降低优先级。

**** TODO [#A] test
** 拆分子任务
当任务工作量很大的时候，拆分成多个更小的子任务通常是一种合理的办法。
在任何地方插入 [/] 和 [%] 可以显示当前待办的进度。

*** 组织一次活动 [33%]
**** TODO 叫人 [1/4]
***** DONE 小明
CLOSED: [2023-06-24 六 22:59]
:LOGBOOK:
- CLOSING NOTE [2023-06-24 六 22:59] \\
  yes
:END:

***** TODO 小明
***** TODO 小明
***** TODO 小明
**** TODO 买东西 [50%]
***** DONE 水果
CLOSED: [2023-06-24 六 23:00]
:LOGBOOK:
- CLOSING NOTE [2023-06-24 六 23:00] \\
  yes
:END:

***** TODO 水果
***** TODO 水果
***** DONE 水果
CLOSED: [2023-06-24 六 23:00]
:LOGBOOK:
- CLOSING NOTE [2023-06-24 六 23:00] \\
  yes
:END:
**** DONE someting
CLOSED: [2023-06-24 六 23:01]
:LOGBOOK:
- CLOSING NOTE [2023-06-24 六 23:01] \\
  yes
:END:
** 复选框
[[*普通列表][普通列表]]里的每个子项都可以变成复选框（通过在列表符号后插入 [ ] 实现）。
复选框不会包含在全局的待办事项中，所以它更适合将一个任务细分成更简单的步骤。

*** C-c C-c
切换复选框的状态。

*** M-S-RET
新建一个复选框（只对普通列表生效）。

*** TODO Organize party [2/2]
- [X] call people
  1. [X] Peter
  2. [X] Tom
  3. [X] Jerry
- [X] order food

* 标签
所有标题都可以带上标签。
标签需要通过两个 : 包裹。
标签名称由字母、数字、下划线和 @ 组成。
一个标题可以有多个标签，通过 : 分隔。
** 标签的继承
子标题会自动继承父标题的标签，不需要显示声明。
如果要让当前文件的所有标题都继承某些标签，可以在文件开头进行设置：
#+begin_src emacs-lisp :tangle yes
#+FILETAGS: :Peter:Boss:Secret:
#+end_src

*** My weekend :myself:
**** do housework :chore:
**** learn emacs :study:
** 设置标签
*** SPC-m-q / C-c C-q
如果当前光标所在行不是标题，则会给父标题加标签。
*** C-c C-c
该命令只针对标题有效。
*** #-TAGS:
前两种方式设置标签会唤起弹窗，弹窗里有一个标签列表，里面的标签都是在当前 buffer 里设置的。
如果 buffer 里没有设置标签，那么显示的就是一个空列表，我们可以在文件开头声明一些预制的标签：
#+begin_src emacs-lisp :tangle yes
#+TAGS: @work @home @tennisclub
#+TAGS: laptop car pc sailboat
#+end_src

**** 快捷键
以上方式唤起的面板，需要用补全来选中标签。可以给标签设置唯一的字符，用快捷键来选择标签：
#+begin_src emacs-lisp :tangle yes
#+TAGS: @work(w) @home(h) @tennisclub(t)
#+TAGS: laptop(l) car(c) pc(p) sailboat(s)
#+end_src

通过 SPC-m-q 唤起面板后，可以发现只需要通过设置的快捷键就可以快速选择标签。
按下 TAB 键可以切换回之前的面板，用补全的方法来选择标签。
按下 SPC 键清空所有标签。
选择完成之后，按下 RET 键就可以确认并退出面板。
*** org-tag-alist
以上三种方式都只能针对当前的 buffer 生效，如果要添加全局标签，可以通过设置 org-tag-alist 变量：
#+begin_src emacs-lisp :tangle yes
(setq org-tag-alist '(("tag1") ("tag2")))
#+end_src

同样，也可以设置快捷键：
#+begin_src emacs-lisp :tangle yes
(setq org-tag-alist '(("tag1" . ?t) ("tag2" . ?T)))
#+end_src

** 标签组
通过以下两种方式设置一个标签组:
#+begin_src emacs-lisp :tangle yes
;; 1. [ 组标签 : 关联的标签（可以重复） ]
#+TAGS: [ GTD : Control Persp ]

;; 2. { 组标签 : 相互排斥的标签 }
#+TAGS: { Context : @Home @Work }
#+end_src

当搜索标签时，如果搜索的是组标签名称，则会显示该组下的所有标签。
可以通过执行 org-toggle-tags-group 命令暂时关闭这个功能。
** 搜索标签
*** SPC-m-s-s m
创建一个稀疏树，返回所有能够匹配标签的标题。
*** SPC-o-A m
*** SPC-o-A M

** test :test:demo:
** test2
*** test3 :@work:
*** test4
*** test5
**** test6 :@tennisclub:
* 属性
** 基本功能
- 每个标题可以有多个不同的属性，用于描述该部分的内容。
- 属性由两个冒号包裹，后面跟着属性的值，形式： =:key: value= 。
- 和标签不同的是，属性是一种 key: value 的数据格式，而标签只是一种类似数组的数据格式。
- 子元素会继承父元素的属性。
** 创建属性
创建属性快捷键：SPC-m-o
同样，可以在文件开头声明属性，这些属性将会被所有入口继承，例如：
#+begin_src emacs-lisp :tangle yes
#+PROPERTY: NDisks_ALL 1 2 3 4
#+end_src
** 稀疏树
通过 SPC-m-s-s p ， 可以通过属性创建稀疏树。

** GroupA
:PROPERTIES:
:CATEGORY: animal pet
:END:
*** Cat
*** Dog
** GroupB
:PROPERTIES:
:CATEGORY: fruit
:END:
*** apple
* 日期和时间
为了更好地规划一个项目，待办事项可以加入一个日期或者时间。
org-mode 里提供日期和时间信息的特殊格式的字符串称为：*时间戳*。

** 时间戳
一个时间戳可以指定某个时间点或者某个时间段。
时间戳可以出现任何地方，无论是在标题里还是在内容里。
如果指定了时间戳，它将会出现在 org-agenda 里。

*** 类型
**** 普通时间戳
最简单的一种时间戳就是将一个日期或者时间赋予一个项目，可以表示一次预约或者其他事件：
***** Meet Peter at the movies
  <2006-11-01 Wed 19:15>
***** Discussion on climate change
  <2006-11-02 Thu 20:00-22:00>
**** 带有重复次数的时间戳
一个时间戳可以指定次数，表示每个一段时间执行一个事件。
重复的周期有以下几种类型:
- day(d)
- week(w)
- month(m)
- year(y)

以下例子表示每周三执行一次时间：
***** Pick up Sam at school
<2023-06-28 Wed 12:30 +1w>
**** 日记风格的表达式
***** 22:00-23:00 The nerd meeting on every 2nd Thursday of the month
<%%(diary-float t 4 2)>
**** 范围
用 -- 连接表示一段时间范围。
***** Meeting
<2004-08-23 Mon>--<2004-08-26 Thu>
**** 不激活的时间戳
用方括号包裹的时间戳不会出现在 org-agenda 中。
***** Gillian comes late for the fifth time
  [2006-11-01 Wed]

** 创建时间戳
SPC-m-d-t / C-c .
    用于创建一个时间戳。如果当前光标所在位置已经有时间戳了，将会修改这个时间戳。
   <2023-06-25 Sun>
    当在同一个位置连续多次创建时间戳成功，将会创建一个时间范围。
   <2023-06-25 Sun>--<2023-06-27 Tue>--<2023-06-29 Thu>--<2023-06-30 Fri>--<2023-07-01 Sat>
SPC-m-d-T
    用于创建一个不被激活的时间戳。
   [2023-06-26 Mon]--[2023-06-27 Tue]
C-S-h/l or S-arrow-left/arrow-right
    向前或向后修改一天的时间。
   <2023-06-26 Mon>
C-S-j/k or S-arrow-up/arrow-down
    如果光标在左括号或者右括号上，将切换时间戳的类型；
    如果光标在括号里面，将根据光标所在的时间参数修改时间，如增加/减少一年；
   <2023-06-26 Mon>

** 截止时间和排定时间
一个时间戳可以用一些特殊的关键字来修饰。
*** 截止时间
在时间戳前插入 DEADLINE ，意味着一个任务（通常是一个待办事项），需要在特定的时间内完成。
**** 创建截止时间
快捷键：SPC-m-d-d / C-c C-d
到了截止日期的任务将会显示在 agenda 上。
另外，如果今天有即将过期或者已经过期的任务，也会在 agenda 中显示出来。

**** TODO Write an article
DEADLINE: <2023-06-26 Mon>
:LOGBOOK:
- State "TODO"       from              [2023-06-26 Mon 10:40]
:END:
*** 排定时间
在时间戳前插入 SCHEDULED ， 表示一个任务已经排定，到了特定时间将会开始执行该任务。
**** 创建排定时间
快捷键：SPC-m-d-s / C-c C-s
另外，如果到了排定时间，会显示一个提醒，直到任务被标注为完成。

**** TODO Write an article
SCHEDULED: <2023-06-27 Tue>
:LOGBOOK:
- State "TODO"       from              [2023-06-26 Mon 10:56]
:END:
*** 重复
一些任务可能需要重复，可以在截止时间或者排定时间加上重复的标志。

**** TODO Pay the rent
DEADLINE: <2023-06-26 Mon +1m>
:LOGBOOK:
- State "TODO"       from              [2023-06-26 Mon 10:59]
:END:

表示每月都会有该任务，每月的 26 号是该任务的截止时间。

** 计时
org-mode 允许你给项目里的一些特殊任务计时。

*** 开始计时
(clock in)
快捷键： SPC-m-c-i / C-c C-x C-i
执行开始计时后，会在时间戳前插入 CLOCK 关键字。

**** TEST
:LOGBOOK:
CLOCK: [2023-06-26 Mon 11:08]--[2023-06-26 Mon 11:09] =>  0:01
:END:

*** 结束计时
(clock out)
快捷键： SPC-m-c-o / C-c C-x C-o
执行结束计时后，会显示出任务计时开始和结束的时间，并计算出花费的时间：HH:MM

*** 更新估时
快捷键： SPC-m-c-e / C-c C-x C-e
为一个开始计时的任务估时，将创建一个属性 Effort。

**** TEST
:PROPERTIES:
:Effort:   0:02
:END:
:LOGBOOK:
CLOCK: [2023-06-26 Mon 11:19]--[2023-06-26 Mon 11:20] =>  0:01
:END:
*** 取消当前计时
快捷键： SPC-m-c-c
取消当前的计时。
*** 跳转到当前计时任务
快捷键： SPC-m-c-g
跳转到当前计时的任务上，如果没有计时任务，则会跳转到最近一条计时任务上。

* 捕获，重新整理，归档
** 捕获
*** 设置捕获存储目录
#+begin_src emacs-lisp :tangle yes
;; 默认为： ~/org/notes.org
(setq org-default-notes-file (concat org-directory "/notes.org"))
#+end_src

*** 使用捕获
SPC-X
开启一个捕获进程，提供一个 narrowed 缓冲区用于编辑捕获内容。

C-c C-c
编辑完捕获内容后，确认并退出捕获进程，返回到原来的位置。

C-c C-w
编辑完捕获内容后，将笔记重新整理到其他地方。

C-c C-k
关闭捕获进程，返回上一个状态。

*** 捕获模板
可以自定义捕获的模板：
#+begin_src emacs-lisp :tangle yes
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
         "* TODO %?\n  %i\n  %a" :prepend t)
        ("j" "Journal" entry (file+datetree "~/org/journal.org")
         "* %?\nEntered on %U\n  %i\n  %a")))
#+end_src

其中，
- %a 捕获时的链接
- %i 初始内容
- %t %T 时间戳，日期或者精确时间
- %u %U 和上面类似，只不过是不能被激活的时间
- %? 光标所在位置
- :prepend 是否将最新的捕获追加在最前面

** 重新整理和复制
当查看被捕获的数据时，可能想要重新整理或者复制一些入口到别的文件。
这里提供了一些快捷操作：

SPC-m-s-r / C-c C-w
将当前光标所在的内容剪切到其他文件中，里面提供了一些补全的文件路径。
如果不选择，则会使用默认的 target，可以通过变量 org-refile-targets 设置默认的 target。

C-c M-w
=org-refile-copy=
操作类似于上面的命令，只不过不是剪切操作，而是复制操作。

** 归档
当项目里的一个子树完成之后，你可能想把它移除并停止 agenda 对它的引用，这时就需要归档。
归档有助于保持工作文件的紧凑并且能让 agenda 的查看变得更快。
最常用的归档操作就是将一个项目里的子树移动到另一个归档文件。

SPC-m-A
将当前光标所在的子树移动到给定的位置（这个位置可以通过 org-archive-location 设置）。

生成的归档文件默认和当前文件在同一目录下，并且文件名是当前文件名加上 _archive 后缀（可以通过 org-archive-location 设置）。

当然，也可以在文件的开头设置：
#+begin_src emacs-lisp :tangle yes
#+ARCHIVE: %s_done::
#+end_src
* 议程视图
一个子项可能是有 TODO、时间戳、标签等，这些信息分散在不同文件的不同位置中，查阅这些信息有时候会变得比较困难。
议程视图（agenda views）提供了对这些特殊信息的概览。
这些特殊信息会被提取在一个特殊的 agenda buffer 里，这个 buffer 是只读的，但是提供了一些命令可以用于远程修改相关文件的信息，比如截止日期或者排定日期。

** 议程文件
议程视图会收集所有议程文件（agenda files）的信息，可以通过 org-agenda-files 变量查看所有包含的议程文件，不在该列表的文件将不会被收集数据。

C-c [
将当前文件加入到 agenda files 中，文件会被移动到这个 agenda files 列表的前面，如果文件存在，则会将它移动到列表的前面。

C-c ]
将当前文件从 agenda files 中移除。

C-'
循环访问 agenda files 中的文件。

** 议程调度
SPC-o-A
唤起议程调度。

在议程调度中，提供了一些默认的命令：
a: 创建一个类似日历的议程视图；
t: 创建一个包含 TODO 关键字的议程视图；
T: 创建一个包含其他关键字（如 DONE TODO）的议程视图；
m: 创建一个符合匹配表达式（匹配标签或者属性）的议程视图；
M: 类似于 m，但只作用于 TODO 事项；
s: 创建一个符合给定正则表达式的议程视图；
S: 类似于 s，但只作用于 TODO 事项。

** 周/天议程
快捷键： SPC-o-A a
将会从 org-agenda-files 中获取所有设置了时间戳的信息，并以周维度显示出来。

org-mode 可以和 emacs 的预约通知交互，通过 org-agenda-to-appt 可以将 agenda 信息添加到预约通知中。

** 全局的待办列表
筛选出 org-agenda-files 中的所有代表事项。
在筛选窗口中可以使用数字加 r 键筛选不同类型的待办。同时，可以直接操作待办的状态，改变后的状态会直接在源文件中生效。

快捷键： SPC-o-A t
将会从 org-agenda-files 中获取所有的待办事项。

快捷键： SPC-o-A T
和上面的命令类似，只不过可以筛选特定状态的待办事项。

** 匹配标签和属性
如果一个标题设置了标签或者属性，你也可以根据这些元数据进行筛选。

SPC-o-A m
用于筛选符合表达式的标题。
比如， +work+urgent-withboss 或者 work|home 这类表达式，用于筛选具有符合这类特定条件标签的标题。

SPC-o-A M
和上面的命令类似，只不过只能筛选是待办事项的标题。

搜索的字符串可以包含一些运算符，比如用 & 代表 AND ， 用 | 代表 OR。也可以通过 =name=value= 这种形式用 = 筛选出符合属性的标题。
以下是一些示例：
+work-boss
选择有 work 标签的标题，但除去 boss 标签的标题。

work|laptop
选择有 work 或者 laptop 标签的标题。

work|laptop+night
选择有 work 或者有 laptop加night 的标题。

** 匹配字符
用于搜索含有特定字符的标题。

快捷键： SPC-o-A s

搜索的字符同样可以使用表达式，例如： +computer +wifi -ethernet -{8\.11[bg]}
表示标题需要包含 computer 和 wifi，但不能有 ethernet，同时也不能有 8.11b 或 8.11g

需要注意的是，这条命令不仅会搜索 org-agenda-files 中的文件，也会搜索 org-agenda-text-search-extra-files 中的文件。

** 议程缓冲区的命令
agenda buffer 中的入口会链接到关联的 org 文件或者 diary 文件中。
你不可以直接编辑 agenda buffer 本身，但 org agenda 提供了一些命令可以用于展示或跳转到入口的源文件位置上。

*** 移动
j / C-j / C-n
向下移动一条记录。

k / C-k / C-p
向上移动一条记录。

*** 查看或跳转到 org 文件
TAB
向右打开一个半屏，并展示源文件的内容。

RET
直接在另一个窗口中展示源文件的内容。

*** 切换视图
o / SPC-w-o
删除其他的分屏，只保留当前的窗口。

z d
切换到一天的视图。

z w
切换到一周的视图。

z t
切换到两周的视图。

z m
切换到一个月的视图。

z y
切换到一年的视图。

z SPC
切换到默认的视图（默认十天）。

.
跳转到今天。

g d
跳转到选中的日期。

r
重新加载 agenda buffer，当 org 文件的内容发生变化时，需要执行此操作。

C-x C-s
保存所有对 org 文件的修改。

*** 远程编辑
t / SPC-m-t
改变事项的待办状态。

d d
删除当前的事项。

SPC-m-r / C-c C-w
重新整理（refile）当前的事项。

d a
归档（archive）当前的事项，使用在 org-archive-default-command 变量中设置的默认归档命令。

d A
归档（archive）当前的事项。

SPC-m-d-s / C-c C-s
设置事项的排定时间。

SPC-m-d-d / C-c C-d
设置事项的截止时间。

S-h / S-arrow-left
将事项的时间往前移动一天，需要按 r 重新加载 agenda buffer。

S-l / S-arrow-right
将事项的时间往后移动一天，需要按 r 重新加载 agenda buffer。

I
事项开始计时（注意开始计时之后需要 C-x C-s 保存对 org 文件的更改，否则结束计时后会直接覆盖开始计时的修改）。

O
事项结束计时（同样需要注意保存对 org 文件的修改）。

c c
取消当前计时。

c g
移动到当前计时的事项上。

c r
切换到计时报告模式。

*** 退出议程
Z Z
org-agenda-quit
退出议程，移除 agenda buffer。

Z Q
org-agenda-exit
退出议程，移除 agenda buffer 和由 agenda 创建的所有 org buffer。

** 自定义议程视图
可以通过设置 org-agenda-custom-commands 变量自定义 agenda views。
例如:
#+begin_src emacs-lisp :tangle yes
(setq org-agenda-custom-commands
      '(("w" todo "WAITING")
        ("u" tags "+boss-urgent")
        ("v" tags-todo "+boss-urgent")))
#+end_src

以上示例中，可以在议程调度菜单（通过 SPC-o-A 触发）中新建三条命令。
其中 w u v 是触发命令的快捷键，todo tags tags-todo 是命令的名称，而 WAITING +boss-urgent +boss-urgent 是和 [[*匹配字符][匹配字符]] 中的布尔逻辑表达式一样的匹配操作。

参数的具体用法可以查看 org-agenda-custom-commands 变量。

* 标记富文本
Org 主要是组织和搜索你的纯文本笔记。然而，它也提供了一个轻量级但强大的标记语言，用于丰富的文本格式和其他。与导出框架结合使用（见导出），你可以在 Org 中编写漂亮的文档。

** 段落
可以用至少一个空行来分割段落。如果你需要在一个段落里强制换行，可以在行的末尾加上 \\ 。

如果想在一个区域内保留换行、缩进和空行，但在其他地方使用正常的格式，你可以使用以下这种结构（这种结构也可以用于格式化诗歌）：
#+begin_verse
 Great clouds overhead
 Tiny black birds rise and fall
 Snow covers Emacs

    ---AlexSchroeder
#+end_verse

当从别的文档引用一个段落时，通常会将它格式化，使其具有左边距和右边距。例如：
#+begin_quote
Everything should be made as simple as possible,
but not any simpler ---Albert Einstein
#+end_quote

如果你想居中一些文本，你也可以:
#+begin_center
Everything should be made as simple as possible, \\
but not any simpler
#+end_center

** 强调和 Monospace
你可以改变一些文本的样式，如下:
*bold*
/italic/
_underline_
=verbatim=
~code~
+strike-through+

** 插入 LaTex
你也可以在 Org 里插入 LaTex 公式：

The radius of the sun is R_sun = 6.96 x 10^8 m.  On the other hand,
the radius of Alpha Centauri is R_{Alpha Centauri} = 1.28 x R_{sun}.

\begin{equation}                        % arbitrary environments,
x=\sqrt{b}                              % even tables, figures
\end{equation}                          % etc

If $a^2=b$ and \( b=2 \), then the solution must be
either $$ a=+\sqrt{2} $$ or \[ a=-\sqrt{2} \].

** Literal examples
你可以编写一些不会受到标记的示例，这类示例是以单空格(Monospace)排版的，所有很适用于源代码和类似的例子。
#+begin_example options
  Some example from a text file.
#+end_example

以上示例也有简写，比如用冒号加一个空格跟上示例行，冒号前面可以有额外的空格:
Here is an example:
    : Some example from a text file.

如果示例是一些编程代码：
#+begin_src emacs-lisp
(message "hello world")
#+end_src

可以使用 SPC-m-' 或者 C-c ' 打开一个支持该编程语言的缓冲区，用于编辑示例代码。

** 图片
插入一张没有描述的图片:
: ./img/cat.jpg

如果想要插入具有描述信息的图片，可以使用 [[*超链接][超链接]] 。

** 创建脚注
段落里的脚注有特定的格式，脚注由一段方括号包裹，括号里面的内容是脚注的标识符 fn: 加上脚注的序号。例如：

这是一个段落[fn:1], 由许多汉字[fn:2]组成。

创建脚注
SPC-m-f / C-c C-x f
在当前光标的位置处创建脚注，如果已经存在脚注，则跳转到脚注的位置上。
注意，使用这个操作会自动将脚注加到一个 Footnotes 标题下，该标题下的内容默认为脚注内容，不会被导出。
如果要修改脚注的标题，可以设置 org-footnotes-section 变量。

在脚注的定义和引用之间跳转
RET / C-c C-c

*** Footnotes
[fn:2] Character

[fn:1] Paragraph

* 导出
Org 可以将文档转换并导出成多种不同的格式，导出的内容会尽可能保证文档结构和标记文本的完整性。

** 导出调度器
导出调度器是 Org 中导出的主要交互界面，该界面会展示出当前配置的导出格式以及一些支持的导出选项。

快捷键: SPC-m-e / C-c C-e

Org 默认会将整个 buffer 都导出。如果 buffer 的视图做了限制，比如使用 SPC-m-s-n 只展示了当前子树的内容，那么只会导出显示的这一部分数据。

** 导出设置
导出时 Org 会自动识别 buffer 中一些特殊的行，作为一些额外的信息。这些行可能被放在文档里的任何地方:
#+begin_quote
#+TITLE: This is Title
#+end_quote

绝大部分导出的选项会包含：
- TITLE
  标题
- AUTHOR
  作者（默认取 user-full-name）
- DATE
  日期或者时间戳
- EMAIL
  邮箱地址(默认取 user-mail-address)
- LANGUAGE
  语言，如 en

这些选项可以通过 [[*导出调度器][导出调度器]] 中的 Insert template（快捷键：#）进行插入。

** 目录
Table of Contents
Org 导出时会默认依据标题生成目录。
可以通过 org-export-with-toc 变量来设置是否要导出目录，也可以通过 org-export-headline-levels 设置导出目录的层级。

同样，你也可以在文件中设置一些关键字选项来配置：
#+begin_quote
#+OPTIONS: toc:2          (only include two levels in TOC)
#+OPTIONS: toc:nil        (no default TOC at all)
#+end_quote

Org 默认将目录放在导出文件的第一个标题里。

** 包含文件
在导出时，可以包含其他文件的内容：
: #+include: "../config.el" src emacs-lisp

第一个参数是需要导出文件的路径;
第二参数（可选）表示指定块的类型, 比如：example export src;
第三个参数（可选）表示源代码的类型，用于格式化内容。

你可以通过 C-c ' 直接访问上面包含的文件。

** 注释
一行由 0 个或者多个空格开始，后面接着一个 # 加空格的内容，会被当成是注释，它将不会被导出。
: # this is comment
:    # this is comment

另外，被 #+BEGIN_COMMENT 和 #+END_COMMENT 包裹的内容也会被当成注释。
: #+begin_comment
: this is comment
: #+end_comment

最后，如果一个标题由 COMMENT 开头，那么这个标题里面的所有内容都会被当成是注释。
可以在标题或者内容处使用快捷键 C-c ; 切换标题的 COMMENT 关键字。

** 导出 ASCII/UTF-8
ASCII export 只会生成包含普通 ASCII 字符的文件，这是最简单而且最直接的文本输出，它不会包含任何的 Org 标记。
UTF-8 export 提供了额外的符合编码规范的字符和符号。

SPC-m-e t a
SPC-m-e t u

** 导出 HTML
Org 模式包含一个 HTML 导出器，具有与 XHTML 1.0 严格标准兼容的大量 HTML 格式。

SPC-m-e h h
将 org 文件导出为 html，例如，myFile.org => myFile.html
注意，如果对同一个文件进行多次导出操作，新生成的导出文件会直接覆盖之前的导出文件。

SPC-m-e h o
将 org 文件导出为 html 并用浏览器打开。

注意，HTML 导出器后端会将 < 和 > 转义成 &lt 和 &gt，如果想要直接插入 html 标签并渲染出来，可以将 html 代码用 ~@@html:~ 和 ~@@~ 包裹。
: @@html:<span style="color: red;">hello</span>@@
: @@html:<b>@@bold text@@html:</b>@@

对于更大的原生 HTML 代码块，可以使用这些 HTML 导出代码块:
: #+HTML: Literal HTML code for export

: #+BEGIN_EXPORT html
: <div style="width:20px;height:20px;background-color:red"></div>
: <div style="width:20px;height:20px;background-color:green"></div>
: #+END_EXPORT

** 导出 LaTeX
LaTeX 导出器后端可以处理复杂的文档、纳入标准或定制的 LaTeX 文档类，使用替代的 LaTeX 引擎生成文件，并生成带有索引、书目和目录的完全链接的 PDF 文件，用于交互式在线浏览或高质量的印刷出版。

默认情况下，LaTeX 输出会使用 =article= 类，你可以通过在文件中加一个选项如
~#+LATEX_CLASS: myclass~ 来改变这一行为。这里用到的 myclass 必须在 org-latex-classes 变量中。

SPC-m-e l l
将 org 文件导出成一个 .tex 后缀的 LaTeX 文件。

SPC-m-e l p
将 org 文件导出成一个 .pdf 后缀的 LaTeX 文件。

SPC-m-e l o
将 org 文件导出成一个 .pdf 后缀的 LaTeX 文件并用默认的 PDF 查看器打开。

有三种方式可以在 org 文件中插入 LaTeX
1. 使用 @ 符号：
   : Code embedded in-line @@latex:any arbitrary LaTeX code@@ in a paragraph.
2. 插入关键字：
   : #+LATEX: any arbitrary LaTeX code
3. 插入导出代码块
   : #+BEGIN_EXPORT latex
   : any arbitrary LaTeX code
   : #+END_EXPORT

** 导出成 iCalendar
Org 模式的互操作性成功的很大一部分是它能够轻松地导出或从外部应用程序导入。iCalendar 导出后端从 Org 文件中获取日历数据并导出为标准的 iCalendar 格式。

SPC-m-e c f
将 org 文件导出成一个 .ics 后缀的 iCalendar 文件。

SPC-m-e c c
根据 org-agenda-files 里的所有 org 文件创建一个联合的 iCalendar 文件，并命名为 org-icalendar-combined-agenda-files 设置的名称。

* 发布
Org 包含了一个发布管理系统，允许你配置一个由内部链接 org 文件的项目进行 HTML 的自动转换。
你也可以通过配置 Org，自动上传导出的 HTML 网页以及相关的资源如图片和源码文件等，到一个 web 服务器上。

详细操作可以餐口手册，这里有一个示例：
#+begin_src emacs-lisp :tangle yes
(setq org-publish-project-alist
      '(("org"
         :base-directory "~/org/"
         :publishing-function org-html-publish-to-html
         :publishing-directory "~/public_html"
         :section-numbers nil
         :with-toc nil
         :html-head "<link rel=\"stylesheet\"
                    href=\"../other/mystyle.css\"
                    type=\"text/css\"/>")))
#+end_src

SPC-m-P-p
选择一个指定的项目，发布项目里的所有文件。

SPC-m-P-P
发布一个含有当前文件的项目。

SPC-m-P-f
发布当前文件。

SPC-m-P-a
发布所有项目。

Org 使用时间戳跟踪每个文件的变化。上面的四个命令通常指发布变化的文件，如果你想发布所有的文件，可以在上面的命令前面加上前缀参数。

* 源代码
Org 提供了一些源代码的功能，包括在原生的 major mode 中编辑代码块、执行代码块、转换代码块和导出代码块以及代码的执行结果。
一个代码块符合以下结构：
: #+NAME: <name>
: #+BEGIN_SRC <language> <switches> <header arguments>
:   <body>
: #+END_SRC

其中：
- name 是代码块的名称，应该是唯一的。
- language 指定了代码块用的编程语言，例如 emacs-lisp, python, shell, R 等等。
- switches 可以用于控制代码的导出。
- header arguments 可以用于控制代码块行为的许多方面。
- body 是源代码。

使用 C-c ' 可以编辑当前代码块，它会在一个可以识别当前语言的 buffer 中打开代码块，可以做文本编辑。再次使用 C-c ' 可以关闭编辑 buffer，并返回原来的 Org buffer 中。

** 使用头参数
一个头参数由一个冒号加上参数的小写名称组成。
头参数可以通过多种方式进行设置，在头参数出现重叠或者冲突的情况下，Org 会优先使用本地的配置。

*** 系统头参数
即通过 org-babel-default-header-args 变量设置的头参数，或者一个指定的语言：org-babel-default-header-args:LANG。

*** 属性头参数
可以通过 header-args 属性（[[*属性][属性]]）设置头参数，或者 header-args:LANG。
属性头参数作用于当前子树下的所有内容。

*** 代码块头参数
头参数大部分都设置在代码块这个层级上，在 BEGIN_SRC 这一行:
: #+NAME: factorial
: #+BEGIN_SRC haskell :results silent :exports code :var n=0
:   fac 0 = 1
:   fac n = n * fac (n-1)
: #+END_SRC
代码块的标题参数可以跨越多行，每行使用 HEADER 关键字。

** 执行代码块
使用 C-c C-c 可以执行当前代码块并将结果插入到 Org 文档里。
默认情况下，只能执行 emacs-lisp 的代码块，如果要执行其他语言的代码块，可以参考手册。
以下示例是一段 emacs-lisp 的代码块和它的执行结果：
: #+begin_src emacs-lisp :tangle yes
: (+ 1 2 3 4)
: #+end_src
:
: #+RESULTS:
: : 10

以下语法用于向代码块中传递参数：
: :var NAME=ASSIGN
其中，NAME 是代码块中会用到的变量名，而 ASSIGN 是赋予变量的值。

: #+begin_src emacs-lisp :var msg="hello world" :tangle yes
: (message msg)
: #+end_src
:
: #+RESULTS:
: : hello world

** 执行结果
Org 如果控制代码块的执行结果，取决于它的头参数，其中主要的参数是 results，它控制了 collection，type，format 和代码块执行结果的控制。

- Collection
  指定代码块的执行结果该如何被收集，可选值有：output 和 value (默认)。
- Type
  指定代码块执行结果的期望类型，可选值有：table, list, scalar 和 file，如果没有提供这个头参数，Org 会自动判断。
- Format
  指定如何格式化执行结果，可选值有：code, drawer, html, latex, link 和 raw。
- Handling
  指定当执行结果格式化完成后如何插入到文档中，可选值有：silent, replace（默认），append, prepend。

当代码块的执行结果是 file 时，例如：图形、图表或者图像，可以接受一个 :file FILENAME 的头参数，执行结果将会保存到一个名为 FILENAME 的文件中，并且会生成一个链接插入到 buffer 中。

** 导出代码块
在导出文件时，可以指定是否导出代码块，或者是否导出代码块的执行结果，或者都不导出，或者都导出。
通过设置 exports 头参数，可选值有： code, results, both 和 none。

:  #+begin_src emacs-lisp :var msg="hello world" :exports both
:  (message msg)
:  #+end_src

** 提取源代码
使用 C-c C-v t (org-babel-tangle) 可以提取当前 buffer 中代码块的所有代码，并将所有同类型的代码保存到一个特定格式的文件中。
注意，只有带上头参数 tangle 的代码块才能被提取出来。

* 杂项
** 补全
M-TAB

** 结构模板
C-c C-,

** 美化标题
插件： org-bullets
