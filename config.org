#+title: Org Config
#+description: Org Mode Configurations In Doom Emacs
#+author: Shy Robin

* packages

#+begin_src emacs-lisp :tangle packages.el
(package! key-chord)

;; (package! scroll-on-jump)

(package! wucuo)

(package! evil-snipe :disable t)

(package! rainbow-mode)

(package! prettier-js)

(package! add-node-modules-path)

;; (package! why-this)

(package! org-bullets)

(package! blamer)

;; 使用 lsp-bridge 需要禁用这些补全插件
(package! lsp-mode :disable t :ignore t)
(package! company :disable t :ignore t)
#+end_src


* configs
#+begin_src emacs-lisp :tangle no
;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src

** general
#+begin_src emacs-lisp :tangle yes
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "" ;; 不需要设置这两项信息，否则 blamer 中的 author name 会使用此信息
      user-mail-address "")
(setq all-the-icons-scale-factor 1)

(map! :i "C-h" "<backspace>")

;; 删除不影响剪贴板
(defun bb/evil-delete (orig-fn beg end &optional type _ &rest args)
    (apply orig-fn beg end type ?_ args))
(advice-add 'evil-delete :around 'bb/evil-delete)

;; move text
(define-key evil-visual-state-map (kbd "J") (concat ":m '>+1" (kbd "RET") "gv=gv"))
(define-key evil-visual-state-map (kbd "K")   (concat ":m '<-2" (kbd "RET") "gv=gv"))

(map! :leader
    :desc "Save file without formatting"
    "f n" #'my-save-file-no-formatting)
#+end_src

** ui
*** font
#+begin_src emacs-lisp :tangle yes
;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-unicode-font' -- for unicode glyphs
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; (setq doom-font (font-spec :family "SauceCodePro Nerd Font" :size 15))
(setq doom-font (font-spec :family "IntelOne Mono" :size 15))

;; treemacs font
;; (setq doom-variable-pitch-font (font-spec :family "SauceCodePro Nerd Font" :size 15))
(setq doom-variable-pitch-font (font-spec :family "IntelOne Mono" :size 15))
#+end_src

*** theme
#+begin_src emacs-lisp :tangle yes
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:

(setq doom-theme 'doom-vibrant)
#+end_src

*** line-number
#+begin_src emacs-lisp :tangle yes
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.

(setq display-line-numbers-type 'relative)
#+end_src

*** window
#+begin_src emacs-lisp :tangle yes
;; 最大化窗口
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
;; 移除顶部标题栏
(add-to-list 'default-frame-alist '(undecorated . t))

(map! :leader
    (:prefix ("w" . "Window")
        :desc "Delete other windows"
        "o" #'delete-other-windows
        :desc "Split window below"
        "b" #'split-window-below
        :desc "Split window right"
        "r" #'split-window-right
        :desc "Select window"
        "w" #'ace-select-window
        :desc "Delete window"
        "d" #'ace-delete-window
    )
)
#+end_src

** org-mode
将不同层级的标题设置不同的字体和字号:
#+begin_src emacs-lisp :tangle no
(let* ((variable-tuple (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                             ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                             ((x-list-fonts "Verdana")         '(:font "Verdana"))
                             ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                             (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
       (base-font-color     (face-foreground 'default nil 'default))
       (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

  (custom-theme-set-faces 'user
                          `(org-level-8 ((t (,@headline ,@variable-tuple))))
                          `(org-level-7 ((t (,@headline ,@variable-tuple))))
                          `(org-level-6 ((t (,@headline ,@variable-tuple))))
                          `(org-level-5 ((t (,@headline ,@variable-tuple))))
                          `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
                          `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
                          `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
                          `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
                          `(org-document-title ((t (,@headline ,@variable-tuple :height 1.5 :underline nil))))))
#+end_src

外观 （https://howardism.org/Technical/Emacs/orgmode-wordprocessor.html）
隐藏强调文本的标记:
#+begin_src emacs-lisp :tangle yes
(setq org-hide-emphasis-markers t)
#+end_src

将列表下的以 - 或 * 加上空格开头的列表项前的符号换成特定样式:
#+begin_src emacs-lisp :tangle yes
(font-lock-add-keywords 'org-mode
                        '(("^ +\\([-*]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src

修改 todo 配置:
#+begin_src emacs-lisp :tangle yes
(setq org-log-done 'note)
(setq org-log-into-drawer t)
(setq org-todo-keywords
      '((sequence "TODO(t!)" "|" "DONE(d@)")
        (sequence "REPORT(r!)" "BUG(b!)" "KNOWNCAUSE(k!)" "|" "FIXED(f@)")
        (sequence "|" "CANCELED(c!)")
        ))
#+end_src

修改时间显示格式：
#+begin_src emacs-lisp :tangle yes
(setq-default org-display-custom-times t)
(setq org-time-stamp-custom-formats '("<%Y-%m-%d %a>" . "<%Y-%m-%d %a %H:%M>"))
#+end_src

捕获文件的位置：
#+begin_src emacs-lisp :tangle yes
(setq +org-capture-todo-file "~/org/captures/todo.org")
(setq +org-capture-notes-file "~/org/captures/notes.org")
(setq +org-capture-journal-file "~/org/captures/journal.org")
#+end_src

快捷键:
#+begin_src emacs-lisp :tangle yes
(map!
    :map org-mode-map
    :n "g l" #'org-down-element
    :n "g h" #'org-up-element
    :n "g j" #'org-next-visible-heading
    :n "g k" #'org-previous-visible-heading
    :n "g J" #'org-forward-element
    :n "g K" #'org-backward-element
)
#+end_src

org 文件默认目录：
#+begin_src emacs-lisp :tangle yes
(setq org-directory "~/org/")
#+end_src

** key-chord
#+begin_src emacs-lisp :tangle yes
;;Exit insert mode by pressing j and then j quickly
(after! key-chord
    (setq key-chord-two-keys-delay 0.5)
    (key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
    (key-chord-mode t)
)
#+end_src

** treemacs
#+begin_src emacs-lisp :tangle yes
(after! treemacs
    ;; 使用默认的彩色图标
    (setq doom-themes-treemacs-config
        (setq doom-themes-treemacs-theme "doom-colors"))
    (treemacs-resize-icons 16)
    (setq +treemacs-git-mode 'deferred)
    (evil-define-key 'treemacs treemacs-mode-map (kbd "or") #'treemacs-visit-node-ace-horizontal-split)
    (evil-define-key 'treemacs treemacs-mode-map (kbd "ob") #'treemacs-visit-node-ace-vertical-split)
    (evil-define-key 'treemacs treemacs-mode-map (kbd "a") #'treemacs-create-file)
    (evil-define-key 'treemacs treemacs-mode-map (kbd "A") #'treemacs-create-dir)

    (custom-set-faces!
        `(treemacs-git-unmodified-face :foreground "#ABB2BF" :weight normal)
        `(treemacs-git-added-face :foreground "#0EAA00" :weight normal)
        `(treemacs-git-modified-face :foreground "#E5C07B" :weight normal)
        `(treemacs-git-renamed-face :foreground "#C678DD" :weight normal)
        `(treemacs-git-deleted-face :foreground "#E06C75" :weight normal)
        `(treemacs-git-ignored-face :foreground "#4B5263" :weight normal)
        `(treemacs-git-conflict-face :foreground "#FF0000" :weight normal)
        `(treemacs-git-untracked-face :foreground "#0A7700" :weight normal)
        `(treemacs-root-face :height 1.1)
    )

    (treemacs-project-follow-mode)
)
(map! :leader
    :desc "Treemacs"
    "e" #'treemacs
)
#+end_src

** ace-windows
#+begin_src emacs-lisp :tangle yes
(after! ace-window
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
)
#+end_src

** format
#+begin_src emacs-lisp :tangle yes
(map! :leader
    (:prefix ("f" . "File")
        :desc "Format buffer"
        "a" #'lsp-format-buffer
        :desc "Format region"
        "v" #'lsp-format-region
    )
)
#+end_src

** tabs
#+begin_src emacs-lisp :tangle yes
(after! centaur-tabs
    (setq centaur-tabs-set-close-button nil)
    (setq centaur-tabs-height 25)
    (setq centaur-tabs-show-new-tab-button nil)
    (setq centaur-tabs-set-bar 'under)
    (setq centaur-tabs-left-edge-margin nil)
    (setq x-underline-at-descent-line t)

    ;; 使用 projectile 分组，项目里的所有文件都会放到一个组里显示。
    ;; 默认使用 centaur-tabs-buffer-groups 函数进行分组，将同类型文件分组。
    (centaur-tabs-group-by-projectile-project)

    ;; 开启 tabs 的重新排序功能。
    (centaur-tabs-enable-buffer-reordering)
    ;; 将跳转后的 tab 放到跳转前的 tab 的右边。
    (setq centaur-tabs-adjust-buffer-order 'right)

    (map!
        :desc "Previous tab"
        :n "H" #'centaur-tabs-backward
        :desc "Next tab"
        :n "L" #'centaur-tabs-forward
        :desc "Move tab to left"
        :n "t h" #'centaur-tabs-move-current-tab-to-left
        :desc "Move tab to right"
        :n "t l" #'centaur-tabs-move-current-tab-to-right
        :desc "New tab"
        :n "t n" #'centaur-tabs--create-new-tab
        :desc "Close current tab"
        :n "t w" #'kill-this-buffer
        :desc "Close other tabs"
        :n "t o" #'centaur-tabs-kill-other-buffers-in-current-group
        :desc "Ace jump tab"
        :n "t t" #'centaur-tabs-ace-jump
        :desc "Select the first tab of the group"
        :n "t b" #'centaur-tabs-select-beg-tab
        :desc "Select the last tab of the group"
        :n "t e" #'centaur-tabs-select-end-tab
        :desc "Go to the next tab group"
        :n "t j" #'centaur-tabs-forward-group
        :desc "Go to the previous tab group"
        :n "t k" #'centaur-tabs-backward-group
    )
)
#+end_src

** flycheck
#+begin_src emacs-lisp :tangle yes
(map!
    :map prog-mode-map
    :desc "Find type definition"
    :n "g t" #'+lookup/type-definition
    :desc "Next flycheck error"
    :n "g n" #'flycheck-next-error
    :desc "Previous flycheck error"
    :n "g N" #'flycheck-previous-error
    :desc "Next flycheck error"
    :n "g j" #'flycheck-next-error
    :desc "Previous flycheck error"
    :n "g k" #'flycheck-previous-error
    :desc "List flycheck errors"
    :n "g l" #'+default/diagnostics
)
#+end_src

** lsp
#+begin_src emacs-lisp :tangle yes
(map!
    :desc "Show doc glance"
    :n "g h" #'lsp-ui-doc-glance
    :desc "Peek find references"
    :n "g r" #'lsp-ui-peek-find-references
)

(setq +lsp-company-backends '(:separate company-capf company-yasnippet))
(setq lsp-lens-enable nil)
(setq lsp-ui-sideline-show-diagnostics nil)
(setq lsp-ui-sideline-show-symbol nil)
;; (setq lsp-eldoc-enable-hover nil)
#+end_src

** scroll-on-jump
#+begin_src emacs-lisp :tangle no
(after! scroll-on-jump
    (with-eval-after-load 'evil
        (scroll-on-jump-advice-add evil-undo)
        (scroll-on-jump-advice-add evil-redo)
        (scroll-on-jump-advice-add evil-jump-item)
        (scroll-on-jump-advice-add evil-jump-forward)
        (scroll-on-jump-advice-add evil-jump-backward)
        (scroll-on-jump-advice-add evil-ex-search-next)
        (scroll-on-jump-advice-add evil-ex-search-previous)
        (scroll-on-jump-advice-add evil-forward-paragraph)
        (scroll-on-jump-advice-add evil-backward-paragraph)
        (scroll-on-jump-advice-add evil-goto-mark)

        ;; Actions that themselves scroll.
        (scroll-on-jump-with-scroll-advice-add evil-goto-line)
        (scroll-on-jump-with-scroll-advice-add evil-scroll-down)
        (scroll-on-jump-with-scroll-advice-add evil-scroll-up)
        (scroll-on-jump-with-scroll-advice-add evil-scroll-line-to-center)
        (scroll-on-jump-with-scroll-advice-add evil-scroll-line-to-top)
        (scroll-on-jump-with-scroll-advice-add evil-scroll-line-to-bottom)
    )
)
#+end_src

** doom-modeline
#+begin_src emacs-lisp :tangle yes
(after! doom-modeline
    (setq doom-modeline-vcs-max-length 999)
    ;; Whether display the modal state icon.
    ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
    (setq doom-modeline-modal-icon nil)
    (setq auto-revert-check-vc-info t)
    (setq doom-modeline-buffer-file-name-style "file-name")
    (setq doom-modeline-height 1)
    (set-face-attribute 'mode-line nil :height 150)
    (set-face-attribute 'mode-line-inactive nil :height 150)
)
#+end_src

** spell check
#+begin_src emacs-lisp :tangle yes
;; ispell 是 Emacs 的内置拼写检查工具。
;; flyspell 是 Emacs 的一个模块，用于实时拼写检查。它会在你输入文本时自动进行拼写检查，并标记出可能的拼写错误。
;; aspell 是一个独立的拼写检查工具，与 Emacs 配合使用。它提供了更强大和灵活的拼写检查功能，支持多种语言和自定义字典。在 Doom Emacs 中，aspell 通常被用作 flyspell 的后端引擎，提供了更准确的拼写检查和更丰富的字典。

(ispell-change-dictionary "en_US" t)

(add-hook 'prog-mode-hook #'wucuo-start)
(add-hook 'text-mode-hook #'wucuo-start)

(setq ispell-program-name "aspell")
;; You could add extra option "--camel-case" for camel case code spell checking if Aspell 0.60.8+ is installed
;; @see https://github.com/redguardtoo/emacs.d/issues/796
(setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US" "--run-together" "--run-together-limit=16" "--camel-case"))

(after! ispell
  (setq ispell-personal-dictionary "~/.config/doom/.spell/my-words")
  (map! :leader :n "b f" 'flyspell-buffer)
)

#+end_src

** projectile
#+begin_src emacs-lisp :tangle yes
;; projectile discover projects in search path
(setq projectile-project-search-path '("~/Projects/"))
#+end_src

** avy
#+begin_src emacs-lisp :tangle yes
(map! :n "f" #'avy-goto-char
      :o "f" #'avy-goto-char
)
#+end_src

** rainbow-mode
#+begin_src emacs-lisp :tangle yes
(use-package! rainbow-mode
  :hook (prog-mode . rainbow-mode))
#+end_src

** prettier-js
#+begin_src emacs-lisp :tangle yes
(setq-hook! 'js-mode-hook +format-with-lsp nil)
(setq-hook! 'js-mode-hook +format-with :none)
(eval-after-load 'web-mode
    '(progn
       (add-hook 'web-mode-hook #'add-node-modules-path)
       (add-hook 'web-mode-hook #'prettier-js-mode)))
(eval-after-load 'typescript-mode
    '(progn
       (add-hook 'typescript-mode-hook #'add-node-modules-path)
       (add-hook 'typescript-mode-hook #'prettier-js-mode)))

(defun my-save-file-no-formatting ()
    (interactive)
    (let ((before-save-hook (remove 'prettier-js before-save-hook)))
    (save-buffer)))
#+end_src

** company
#+begin_src emacs-lisp :tangle yes
;; fix: complete objects error
(advice-add 'json-parse-string :around
    (lambda (orig string &rest rest)
        (apply orig (s-replace "\\u0000" "" string)
        rest)))

;; minor changes: saves excursion and uses search-forward instead of re-search-forward
(advice-add 'json-parse-buffer :around
    (lambda (oldfn &rest args)
        (save-excursion
            (while (search-forward "\\u0000" nil t)
            (replace-match "" nil t)))
        (apply oldfn args)))

(after! company
    ;;; Prevent suggestions from being triggered automatically. In particular,
    ;;; this makes it so that:
    ;;; - TAB will always complete the current selection.
    ;;; - RET will only complete the current selection if the user has explicitly
    ;;;   interacted with Company.
    ;;; - SPC will never complete the current selection.
    ;;;
    ;;; Based on:
    ;;; - https://github.com/company-mode/company-mode/issues/530#issuecomment-226566961
    ;;; - https://emacs.stackexchange.com/a/13290/12534
    ;;; - http://stackoverflow.com/a/22863701/3538165
    ;;;
    ;;; See also:
    ;;; - https://emacs.stackexchange.com/a/24800/12534
    ;;; - https://emacs.stackexchange.com/q/27459/12534

    ;; <return> is for windowed Emacs; RET is for terminal Emacs
    (dolist (key '("<return>" "RET"))
        ;; Here we are using an advanced feature of define-key that lets
        ;; us pass an "extended menu item" instead of an interactive
        ;; function. Doing this allows RET to regain its usual
        ;; functionality when the user has not explicitly interacted with
        ;; Company.
        (define-key company-active-map (kbd key)
            `(menu-item nil company-complete
                :filter ,(lambda (cmd)
                    (when (company-explicit-action-p)
                        cmd)))))
    ;; (define-key company-active-map (kbd "TAB") #'company-complete-selection)
    (map! :map company-active-map "TAB" #'company-complete-selection)
    (map! :map company-active-map "<tab>" #'company-complete-selection)
    (define-key company-active-map (kbd "SPC") nil)

    ;; Company appears to override the above keymap based on company-auto-complete-chars.
    ;; Turning it off ensures we have full control.
    (setq company-auto-commit-chars nil)
)
#+end_src

** why-this
#+begin_src emacs-lisp :tangle no
(global-why-this-mode)
(setq why-this-annotate-enable-heat-map nil)
(setq why-this-enable-tooltip nil)
#+end_src

** diff-hl
#+begin_src emacs-lisp :tangle yes
(after! diff-hl
    (map! :leader
        "g j" #'diff-hl-next-hunk
        "g k" #'diff-hl-previous-hunk
        "g J" #'diff-hl-show-hunk-next
        "g K" #'diff-hl-show-hunk-previous
    )
)
#+end_src

** org-bullets
#+begin_src emacs-lisp :tangle yes
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** blamer
#+begin_src emacs-lisp :tangle yes
(after! blamer
    (setq blamer-View 'overlay-right)
    (setq blamer-author-formatter "%s")
    (setq blamer-datetime-formatter " <%s> ")
    (setq blamer-commit-formatter "%s")
    (setq blamer-min-offset 40)
    (custom-set-faces!
        `(blamer-face :italic nil :foreground "#62686E")
    )
)
(global-blamer-mode 1)
#+end_src

** evil-multiedit
#+begin_src emacs-lisp :tangle yes
(map!
    :n "C-n" #'evil-multiedit-match-and-next
    :v "C-n" #'evil-multiedit-match-and-next
)
(map!
    :map evil-multiedit-mode-map
    :n "C-n" nil
    :n "C-p" nil
    :n "R" #'evil-multiedit-match-all
    :n "C-j" #'evil-multiedit-next
    :n "C-k" #'evil-multiedit-prev
    :i "C-j" #'evil-multiedit-next
    :i "C-k" #'evil-multiedit-prev
)
#+end_src

** web-mode
#+begin_src emacs-lisp :tangle yes
(setq web-mode-part-padding 0)
(setq web-mode-style-padding 0)
(setq web-mode-script-padding 0)
#+end_src

** evil-mode
#+begin_src emacs-lisp :tangle yes
(after! evil
  ;; 解决当标签内部元素为空时，cit 直接删除整个标签的问题。
  ;; see： https://github.com/emacs-evil/evil/issues/990
  (defun evil-select-xml-tag (beg end type &optional count inclusive)
    (cond
     ((and (not inclusive) (= (abs (or count 1)) 1))
      (evil-select-block #'evil-up-xml-tag beg end type count nil t))
     (t
      (evil-select-block #'evil-up-xml-tag beg end type count inclusive)))))
#+end_src

** yasnippet
#+begin_src emacs-lisp :tangle yes
;; 解决补 emmet 补全后无法 undo 的问题。
(setq yas-snippet-revival nil)
#+end_src

** lsp-bridge
#+begin_src emacs-lisp :tangle yes
(add-to-list 'load-path "~/Projects/lsp-bridge")

(require 'yasnippet)
(yas-global-mode 1)

(require 'lsp-bridge)
(global-lsp-bridge-mode)

(after! lsp-bridge
  (map! :map lsp-bridge-mode-map
        :i "C-j" #'acm-select-next
        :i "C-k" #'acm-select-prev
        :i "C-l" #'acm-select-last
        :i "C-f" #'acm-select-first
        :i "C-n" #'acm-select-next-page
        :i "C-p" #'acm-select-prev-page
        :i "<tab>" #'acm-complete
        :i "C-d" #'acm-doc-scroll-up
        :i "C-u" #'acm-doc-scroll-down
        ;; :i "C-<space>" #'lsp-bridge-popup-complete-menu

        :n "g d" #'lsp-bridge-find-def
        :n "g b" #'lsp-bridge-find-def-return
        :n "g i" #'lsp-bridge-find-impl
        :n "g I" #'lsp-bridge-find-impl-other-window
        :n "g t" #'lsp-bridge-find-type-def
        :n "g T" #'lsp-bridge-find-type-def-other-window
        :n "g r" #'lsp-bridge-find-references
        :n "g h" #'lsp-bridge-popup-documentation
        :n "C-j" #'lsp-bridge-popup-documentation-scroll-up
        :n "C-k" #'lsp-bridge-popup-documentation-scroll-down
        :n "g j" #'lsp-bridge-diagnostic-jump-next
        :n "g k" #'lsp-bridge-diagnostic-jump-prev
        :n "g l" #'lsp-bridge-diagnostic-list
        :n "g p" #'lsp-bridge-peek

        :leader
        :n "r n" #'lsp-bridge-rename
        :n "c a" #'lsp-bridge-code-action
  )
)
#+end_src
